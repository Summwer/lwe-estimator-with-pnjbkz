

# This file was *autogenerated* from the file wzd-est.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_38 = Integer(38); _sage_const_1792 = Integer(1792); _sage_const_1p = RealNumber('1.'); _sage_const_0 = Integer(0); _sage_const_10 = Integer(10); _sage_const_1 = Integer(1)
import time
load("../framework/est/NIST-est.sage")

######################################
#set method parameters
'''
    
    method = 1: progressive bkz estimation.
             2: two step mode
             3: bkz-only with fixed blocksize
             4: default g6k
             "fixed-blocksize bkz-only": call fixed-blocksize bkz-only model to estimate security.
    progressive_sieve = True:  progressive sieve

    cost_model = 1: theoretical cost estimation
               = 2: experimental cost estimation

    ldc_param = "MATZOV22": list decoding method in [MATZOV22]
                "AGPS20"(default): list decoding method in [AGPS20]
    
    cal_ee = "avg_sigma": martin's primal usvp + two step
             "chi" #chi-square + probabilistic + two-step
'''
#######################################
#Fixed parameters

method = _sage_const_2 
worst_case = False
#estimator in [DDGR20]
ldc_param = "AGPS20"
cal_ee = "chi" #chi-square + probabilistic + two-step
goal_min_cost = "gate_min" # "gate_min": find the minimal gates cost in two-step
                           # "gate_RAM_min": find the minimal (gates+RAM) cost in two-step 

#Martin's primal usvp + our two-step mode
ldc_param = "MATZOV22" #list decoding complexity proposed in [MATZOV22]
#cal_ee = "avg_sigma" #primal-martin-usvp + two-step
#------------------------------------




# WZD parameters
print("============= WZD")
q = _sage_const_2 **_sage_const_38 
n = _sage_const_1792 
m = n
D_s = {x : _sage_const_1p /_sage_const_2  for x in range(_sage_const_0 , _sage_const_2 )}
D_e =  {x : _sage_const_1p /_sage_const_2  for x in range(_sage_const_0 , _sage_const_2 )}
dim_, dvol = initialize_from_LWE_instance(n, q, m, D_e, D_s,m_range = -_sage_const_10 )

#leaky-lwe-estimator
svp_estimate_attack( silent=False, method = _sage_const_1 ,  dvol = dvol, dim_ = dim_,gen_GSA_gso = True,print_l = False ,ldc_param =  ldc_param, cal_ee = cal_ee, worst_case = False, goal_min_cost = goal_min_cost)

#refined-two-step-lwe-estimator
svp_estimate_attack( silent=False, method = _sage_const_2 ,  dvol = dvol, dim_ = dim_,gen_GSA_gso = True,print_l = False ,ldc_param =  ldc_param, cal_ee = cal_ee, worst_case = False, goal_min_cost = goal_min_cost)




