

# This file was *autogenerated* from the file asvp_est.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_0p = RealNumber('0.'); _sage_const_122 = Integer(122); _sage_const_2 = Integer(2); _sage_const_65 = Integer(65); _sage_const_32 = Integer(32); _sage_const_55 = Integer(55); _sage_const_1 = Integer(1); _sage_const_10 = Integer(10); _sage_const_50 = Integer(50)
load("../framework/utils.sage")
load("../framework/d_svp_prediction.sage")
load("../framework/cost.sage")
load("../framework/simulator/pnjbkz_simulator.sage")

def gamma_in_colattice_pump(log_rr, blocksizes):
    gh = gaussian_heuristic(log_rr)
    l = _sage_const_0 
    r = _sage_const_0 
    ap_norm = _sage_const_0p 
    for beta in blocksizes:
        r+= beta
        ap_norm += gaussian_heuristic(log_rr[l:r])
        l = r
    return sqrt(ap_norm/gh)

def gamma_in_bkz(log_rr, blocksize):
    gh = gaussian_heuristic(log_rr)
    return sqrt(gaussian_heuristic(log_rr[:blocksize])/gh)



#for lattice challenge: n = q

q = _sage_const_122 
dim = q*_sage_const_2 
dvol = q*log(q)
print("Generate gs-lengths by GSA assumption.")
delta = compute_delta(_sage_const_2 )
log_rr = [_sage_const_2 *log(bkzgsa_gso_len(dvol, i, dim, delta=delta))  for i in range(dim)]
blocksizes = [_sage_const_65 , _sage_const_32 , _sage_const_55 ]
gcp = gamma_in_colattice_pump(log_rr, blocksizes)
gh = gaussian_heuristic(log_rr)
sv_norm = gcp*gh

print("reduced norm = %.1f" %sv_norm)

ccost = colattice_pump_cost(dim, blocksizes)
print("approxiamte factor in colattice-pump with ",blocksizes, end="")
print(" is %.3f" %gcp)
print("colattice-pump time cost: %.3f log2(gates), memory cost: %.3f log2(bits)" %(ccost[_sage_const_0 ],ccost[_sage_const_1 ]))

for blocksize in range(dim-_sage_const_1 ,_sage_const_10 ,-_sage_const_1 ):
    bkz_cost = theo_bkz_cost(dim, blocksize)
    if bkz_cost[_sage_const_0 ] <= ccost[_sage_const_0 ]:
        break
blocksize = _sage_const_50 
gcpbkz = gamma_in_bkz(log_rr, blocksize)
print("approxiamte factor in bkz-%d with " %blocksize , end="")
print(" is %.3f" %gcpbkz)
print("bkz time cost: %.3f log2(gates), memory cost: %.3f log2(bits)" %(bkz_cost[_sage_const_0 ],bkz_cost[_sage_const_1 ]))

