#include "instance_gen.h"


void initialize_from_LWE_instance(ZZ_mat<ZT> &A, ZZ_mat<ZT> &B, ZZ_mat<FT> &S,vector<Z_NR<ZT>> &b, vector<Z_NR<ZT>> &u, vector<double> &mu, int n, int q, int m, map<int,rational<int>> D_e,map<int,rational<int>> D_s, bool verbosity){
    /*
    constructor that builds a DBDD instance from a LWE instance
    :n: (integer) size of the secret s
    :q: (integer) modulus
    :m: (integer) size of the error e
    :D_e: distribution of the error e (dictionnary form)
    :D_s: distribution of the secret s (dictionnary form)
    */
    
    if(verbosity){
       printf_red("     Build DBDD from LWE     ");
       cout<<"n="<<n<<"\t"<<"m="<<m<<"\t"<<"q="<<q<<endl;
    }
    //define the mean and sigma of the instance
    pair<rational<int>,rational<int>> mu_s_e = average_variance(D_e);
    pair<rational<int>,rational<int>> mu_s_s = average_variance(D_s);
    //rational<int> mu_e(mu_s_e.first), s_e(mu_s_e.second), mu_s(mu_s_s.first), s_s(mu_s_s.second);
    double mu_e = rational_cast<double>(mu_s_e.first),
           s_e = rational_cast<double>(mu_s_e.second),
           mu_s = rational_cast<double>(mu_s_s.first),
           s_s = rational_cast<double>(mu_s_s.second);

    //cout << "double=" << rational_cast<double>(mu_e) << endl;
    
    printf("mu_e = %.2lf, s_e = %.2lf, mu_s = %.2lf, s_s = %.2lf\n",mu_e,s_e,mu_s,s_s);
    
    
    int d = m+n+1;
    
    mu.resize(d);
    for(int i = 0; i < d; i++){
        if(i<m)
            mu[i] = mu_e;
        else if(i<d-1)
            mu[i] = mu_s;
        else
            mu[i] = 1.;
    }
    
    
    S.gen_identity(d);
    for(int i = 0; i < S.get_rows(); i++){
        if(i<m)
            S[i][i] = s_e;
        else if(i<m+n)
            S[i][i] = s_s;
        else
            S[i][i] = 0;
    }
    //S.print_comma(cout);
    


    //Generate m lattice samples stored in an m*n matrix.
    A.gen_zero(m,n); 
    gen_samples(A,m,n,q); 
    // A.print_comma(cout);
    
    // draw matrix B and define the lattice: B = [[qI,0],[-A^T,I]], A is lattice samples. Each col is one group of sample.
    build_LWE_lattice(B,A,q);
    // B.print_comma(cout);

    // draw the secrets
    vector<Z_NR<ZT>> s,e;
    s.resize(n);
    e.resize(m);
    for(int i =0; i<n; i++){    
        s[i] = draw_from_distribution(D_s);
    }
    for(int i =0; i<m; i++)
        e[i] = draw_from_distribution(D_e);
    // print_vector(s);
    //print_vector(e);

    // compute the public value t and build a target
    // b= (s*A.T + e)(mod q)
    A.transpose(); 
    vector_matrix_product(b, s, A); 
    Z_NR<ZT> q2;
    q2 = q;
    for(int i =0; i< m; i++){
        b[i].add(b[i],e[i]);
        b[i].mod(b[i],q2);
    }   
    // print_vector(b);

    vector<Z_NR<ZT>> tmp = b;
    tmp.resize(m+n);
    kannan_embedding(B, tmp);
    // B.print_comma(cout);

    
    u.resize(d);
    for(int i = 0; i < d; i++){
        if(i<m)
            u[i] = e[i];
        else if(i<d-1)
            u[i] = s[i-m];
        else
            u[i] = 1;
    }
    // print_vector(u);

}

int main(){

    // FP_NR<mpfr_t>::set_prec(32); 
    
    /*----------------Instance Generation-----------------*/
    /*    //Dilithium-I round-3 parameters
    printf("============= Dilithium-I\n");
    int n = 4*256;
    int m = 4*256;
    // int n = 5;
    // int m = 6;
    int q = 8380417;
    int eta = 2;

    map<int,rational<int>> D_s,D_e;
    rational<int> one(1);
    for(int x=-eta; x<=eta; x++){
        D_s[x] = one/(2*eta+1);
        D_e[x] = one/(2*eta+1);
    }

    bool verbosity = true;

    ZZ_mat<ZT> A,B;
    ZZ_mat<FT> S;
    vector<Z_NR<ZT>> b, u;
    vector<double> mu;
    initialize_from_LWE_instance(A, B, S, b, u, mu, n, q, m, D_e, D_s, verbosity);
    // A.print_comma(cout);
    // B.print_comma(cout);
    // S.print_comma(cout);
    // print_vector(b);
    // print_vector(u);
    // print_vector(mu);
    */
    /*------------------------------------------------------------*/


    /*----------------------Simulator test------------------------*/

    //Generated by leaky-lwe-estimator in sage with dim_ and dvol
    /*
    # Dilithium-I round-3 parameters

    int d = 2049;
    FP_NR<FT> dvol = 15614.219317244602;
    int cost_model = 1;
    


    //test 
    d = 202;
    dvol = 358.0663365218434;
    cost_model = 2;
    printf_input(d,dvol);

    // cost_test();
    // d_svp_predict_test(d,dvol);
    simulator_test(d, dvol);
    //bssa_test(d, dvol);
    enumbs_test(d,dvol,cost_model);
    


    return 1;


    /*
    print("============= Dilithium-II")
    # Dilithium-II round-3 parameters
    n = 5*256
    m = 6*256
    q = 8380417
    eta = 4
    D_s = {x : round_to_rational(1)/(2*eta+1) for x in range(-eta, eta+1)}
    D_e = D_s
    */
    // d = 2817;
    // dvol = 21814.858106487554;

    /*
    print("============= Dilithium-III")
    # Dilithium-II round-3 parameters
    n = 7*256
    m = 8*256
    q = 8380417
    eta = 2
    D_s = {x : round_to_rational(1)/(2*eta+1) for x in range(-eta, eta+1)}
    D_e = D_s
    */
    // d = 3841;
    // dvol = 31317.16147360077;




}