// #include <boost/math/distributions/chi_squared.hpp>
#include <iostream>
#include "../framework/est.h"

using namespace std;
// using namespace boost;



void sim_strategy(vector<double> l, vector<tuple<int,int,int>> strategy, double sigma){
    int dim = int(l.size());
    Params* params = new Params;
    params->cost_model = 2;
    BKZJSim* sim = new BKZJSim(params);
    COST* cost = new COST(params);

    for(int i = 0; i<int(strategy.size()); i++){
        int beta = get<0>(strategy[i]), jump = get<1>(strategy[i]), tours = get<2>(strategy[i]);
        for(int t = 0; t< tours; t++){
            sim -> simulate(l,l,beta,jump,1);
            double slope = get_current_slope(l,0,dim);
            pair<double,double> G = cost->bkz_cost(dim,beta,jump,2);
            printf("Strategy (%d,%d,%d), slope = %lf, sim-cost = %3.7f sec\n", beta,jump,t+1,slope, pow(2,G.first));

        } 
    }

    // print_vector(l,0,dim);
    for(int i = 0; i < dim; i++){
        l[i] -= log2(sigma);
    }

    tuple<double,int,double,double> dsvp_t_ = dsvp_predict(l, 0., cost, 2, true, true);

    int dsvp = get<1>(dsvp_t_);
    int f = default_dim4free_fun(dsvp);
    // int f = dims4free(dsvp);
    printf("pump-{%d,%d,%d}, sim-pump cost = %3.7f sec\n",  dim - dsvp, dsvp, f, pow(2, get<2>(dsvp_t_)));  

    cout<<"============================="<<endl;
}


//Simulate the stratey from gsa-gs-lengths and original lwe instance 
void test_lwechal_from_gsa_and_original_instance(int n, double alpha, vector<tuple<int,int,int>> strategy){

    LWEchal* lwechal = gen_lwechal_instance(n, alpha);
    int dim = lwechal->dim;
    FP_NR<FT> dvol = lwechal->dvol;
    vector<double> l = lwechal->log_rr, l_;
    double  sigma = lwechal->alpha * lwechal->q;
    // sim_strategy(l, strategy,sigma);

    

    printf("After a sigma normalization,");
    for(int i = 0; i < dim; i++){
        l[i] -=  log2(sigma);
    }
    double slope = get_current_slope(l,0,dim);
    printf("slope = %f\n", slope);
    sim_strategy(l, strategy,1.);

    throw "";

    printf("Generate gs-lengths by GSA assumption...\n");
    l = gen_simulated_gso(dim, dvol);
    slope = get_current_slope(l,0,dim);
    cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;
    sim_strategy(l, strategy, 1.);
}

int main(){
    int n = 40;
    double alpha = 0.025;
    vector<tuple<int,int,int>> strategy = {};//{{ 79,  8,  1},{ 91,  8,  1},{112,  8,  1}};
    for(int i = 10; i < 50; i++)
        strategy.insert(strategy.end(),{i,1,1});
    test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);


    n = 45;
    alpha = 0.020;
    strategy = {{ 89,  8,  1},{109,  8,  2}};
    test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);


    n = 50;
    alpha = 0.015;
    strategy = {{ 89,  8,  1},{107,  8,  2}};
    test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);


    // n = 55;
    // alpha = 0.010;
    // strategy = {{ 89,  8,  1},{109,  8,  2}};
    // test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);



    n = 40;
    alpha = 0.035;
    strategy = {{ 83,  8,  1},{ 93,  8,  1},{108,  8,  1},{117,  8,  1},{119,  4,  1},{133,  4,  1}};
    test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);



    n = 40;
    alpha = 0.045;
    strategy = {{ 79,  8,  1},{ 89,  8,  1},{117,  8,  2},{117,  4,  1},{123,  4,  1},{135,  4,  1},{148,  4,  1},{156,  2,  1}};
    test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);



}