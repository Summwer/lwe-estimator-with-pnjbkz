// #include <boost/math/distributions/chi_squared.hpp>
#include <iostream>
#include "../framework/est.h"

using namespace std;
// using namespace boost;



void sim_strategy(Params* params, vector<double> l, vector<tuple<int,int,int>> strategy, double sigma){
    cout<<"cost_model = "<<params->cost_model<<endl;
    int dim = int(l.size());
    BKZJSim* sim = new BKZJSim(params,dim);
    COST* cost = new COST(params);
    double Gcum = 0., Bcum = 0.;
    for(int i = 0; i<int(strategy.size()); i++){
        int beta = get<0>(strategy[i]), jump = get<1>(strategy[i]), tours = get<2>(strategy[i]);
        for(int t = 0; t< tours; t++){
            sim -> simulate(l,l,beta,jump,1);
            double slope = get_current_slope(l,0,dim);
            pair<double,double> G = cost->bkz_cost(dim,beta,jump,params->cost_model);
            printf("Strategy (%d,%d,%d), slope = %lf, sim-cost = %3.7f sec\n", beta,jump,t+1,slope, pow(2,G.first));
            Gcum = log2(pow(2,Gcum)+pow(2,G.first));
            Bcum = max(Bcum, G.second);
        } 
    }

    // print_vector(l,0,dim);
    for(int i = 0; i < dim; i++){
        l[i] -= log2(sigma);
    }

    tuple<double,int,double,double> dsvp_t_ = dsvp_predict(l, 0., cost, params->cost_model, true, true);

    int dsvp = get<1>(dsvp_t_);
    // int f = default_dim4free_fun(dsvp);
    int f = get_f_for_pump(params,dsvp);
    // int f = dims4free(dsvp);
    printf("pump-{%d,%d,%d}, sim-pump cost = %3.7f sec\n",  dim - dsvp, dsvp, f, pow(2, get<2>(dsvp_t_)));  
    Gcum = log2(pow(2,Gcum)+pow(2,get<2>(dsvp_t_)));
    Bcum = max(Bcum, get<3>(dsvp_t_));
    cout<<"Gcum = "<<Gcum<<", Bcum = "<<Bcum<<endl;

    cout<<"============================="<<endl;
}


//Simulate the stratey from original lwe instance 
void test_lwechal_from_original_instance(Params* params, int n, double alpha, vector<tuple<int,int,int>> strategy){

   
    LWEchal* lwechal = gen_lwechal_instance(n, alpha);
    int dim = lwechal->dim;
    FP_NR<FT> dvol = lwechal->dvol;
    vector<double> l = lwechal->log_rr, l_;
    double  sigma = lwechal->alpha * lwechal->q;
    // printf("No sigma normalization,");
    // sim_strategy(l, strategy,sigma);


    printf("After a sigma normalization,");
    for(int i = 0; i < dim; i++){
        l[i] -=  log2(sigma);
    }
    double slope = get_current_slope(l,0,dim);
    printf("slope = %f\n", slope);
    
    sim_strategy(params, l, strategy,1.);

    // throw "";
}


//Simulate the stratey from gsa-gs-lengths and original lwe instance 
void test_lwechal_from_gsa(Params* params, int dim, double dvol, vector<tuple<int,int,int>> strategy){
    printf("Generate gs-lengths by GSA assumption...\n");
    vector<double>  l = gen_simulated_gso(dim, dvol);
    double slope = get_current_slope(l,0,dim);
    cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;

    sim_strategy(params, l, strategy, 1.);
}


int main(){

    // int n = 40;
    // double alpha = 0.035;
    // vector<tuple<int,int,int>> strategy = {{83, 8, 1}, {93, 8, 1}, {108, 8, 1}, {117, 8, 1}, {119, 4, 1}, {133, 4, 1}};
    // // for(int i = 10; i < 50; i++)
    // //     strategy.insert(strategy.end(),{i,1,1});
    // test_lwechal_from_original_instance(params, n, alpha, strategy);



    Params* params = new Params;
    params->cost_model = 1;
    printf("============= Kyber-I\n");
    //eta1 = 3, eta2 = 2
    int dim = 1004;
    double dvol = 3882.6780896;
    vector<tuple<int,int,int>>  strategy = {{ 50,  1,  1},{ 51,  1,  1},{ 52,  1,  1},{ 53,  1,  1},{ 54,  1,  1},{ 55,  1,  1},{ 56,  1,  1},{ 57,  1,  1},{ 58,  1,  1},{ 59,  1,  1},{ 60,  1,  1},{ 61,  1,  1},{ 62,  1,  1},{ 63,  1,  1},{ 64,  1,  1},{ 65,  1,  1},{ 66,  1,  1},{ 67,  1,  1},{ 68,  1,  1},{ 69,  1,  1},{ 70,  1,  1},{ 71,  1,  1},{ 72,  1,  1},{ 73,  1,  1},{ 74,  1,  1},{ 75,  1,  1},{ 76,  1,  1},{ 77,  1,  1},{ 80,  1,  5},{ 81,  8,  5},{ 81,  7,  5},{ 81,  4,  1},{ 82,  8,  5},{ 82,  7,  5},{ 83,  8,  5},{ 83,  7,  5},{ 83,  4,  1},{ 84,  8,  5},{ 84,  7,  5},{ 85,  8,  5},{ 85,  7,  4},{ 86,  8,  4},{ 87,  8,  5},{ 87,  7,  1},{ 87,  4,  5},{ 88,  4,  4},{ 89,  4,  5},{ 90,  4,  4},{ 91,  4,  4},{ 92,  4,  2},{ 93,  4,  2},{ 94,  4,  2},{ 95,  4,  2},{ 96,  4,  2},{ 97,  4,  2},{ 98,  4,  1},{100,  4,  4},{101,  4,  1},{102,  4,  2},{103,  4,  2},{104,  4,  1},{105,  4,  2},{106,  4,  1},{107,  4,  2},{108,  4,  2},{109,  4,  1},{110,  4,  1},{111,  4,  2},{112,  4,  1},{114,  4,  3},{115,  4,  2},{116,  4,  1},{117,  4,  1},{118,  4,  2},{119,  4,  1},{120,  4,  1},{121,  4,  1},{122,  4,  2},{123,  4,  1},{124,  4,  1},{125,  4,  1},{127,  4,  1},{128,  4,  3},{129,  4,  1},{130,  4,  1},{131,  4,  1},{132,  4,  1},{133,  4,  1},{134,  4,  1},{135,  4,  1},{136,  4,  1},{137,  4,  2},{138,  4,  1},{141,  4,  3},{142,  4,  1},{143,  4,  1},{144,  4,  1},{145,  4,  1},{146,  4,  1},{147,  4,  1},{148,  4,  1},{149,  4,  1},{150,  4,  1},{150,  2,  2},{151,  2,  1},{154,  2,  2},{155,  2,  1},{156,  2,  1},{157,  2,  1},{158,  2,  1},{162,  4,  1},{164,  4,  1},{165,  4,  1},{167,  4,  1},{169,  4,  1},{170,  4,  1},{171,  4,  1},{172,  4,  1},{173,  4,  1},{175,  4,  1},{176,  4,  1},{178,  4,  1},{179,  4,  1},{181,  4,  1},{183,  4,  1},{184,  4,  1},{185,  4,  1},{186,  4,  1},{188,  4,  1},{189,  4,  1},{191,  4,  1},{194,  4,  1},{195,  4,  1},{197,  4,  1},{198,  4,  1},{199,  4,  1},{201,  4,  1},{203,  4,  1},{205,  4,  1},{207,  4,  1},{209,  4,  1},{211,  4,  1},{212,  4,  1},{214,  4,  1},{216,  4,  1},{218,  4,  1},{221,  4,  1},{221,  2,  2},{223,  2,  1},{228,  4,  1},{230,  4,  1},{234,  4,  1},{236,  4,  1},{236,  2,  1},{237,  2,  1},{243,  4,  1},{245,  4,  1},{247,  2,  2},{250,  2,  1},{252,  2,  1},{258,  4,  1},{262,  4,  1},{262,  2,  1},{264,  2,  1},{267,  2,  1},{274,  4,  1},{276,  4,  1},{276,  2,  1},{278,  2,  1},{281,  2,  1},{289,  4,  1},{289,  2,  1},{291,  2,  1},{294,  2,  1},{298,  2,  1},{302,  2,  1},{305,  2,  1},{309,  2,  1},{314,  2,  1},{317,  2,  1},{320,  2,  1},{324,  2,  1},{328,  2,  1},{333,  2,  1},{336,  2,  1},{340,  2,  1},{345,  2,  1},{350,  2,  1},{354,  2,  1},{359,  2,  1},{364,  2,  1},{368,  2,  1},{374,  2,  1},{380,  2,  1},{385,  2,  1},{390,  2,  1},{395,  2,  1}};
    test_lwechal_from_gsa(params, dim, dvol, strategy);

    // Kyber-II(Kyber-768) round-3 parameters
    // printf("============= Kyber-II\n");
    // dim =  1467;
    // dvol =  5661.0782118;
    // test_lwechal_from_gsa(dim, dvol, strategy);

    // printf("============= Dilithium-I\n");
    // int dim =  2049;
    // int dvol = 15614.219317244602;
    // strategy = {}
    // test_lwechal_from_gsa(dim, dvol, strategy);

    // int n = 40;
    // double alpha = 0.025;
    // vector<tuple<int,int,int>> strategy = {{ 79,  8,  1},{ 91,  8,  1},{112,  8,  1}};
    // for(int i = 10; i < 50; i++)
    //     strategy.insert(strategy.end(),{i,1,1});
    // test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);

    // n = 45;
    // alpha = 0.020;
    // strategy = {{ 89,  8,  1},{109,  8,  2}};
    // test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);


    // n = 50;
    // alpha = 0.015;
    // strategy = {{ 89,  8,  1},{107,  8,  2}};
    // test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);


    // // n = 55;
    // // alpha = 0.010;
    // // strategy = {{ 89,  8,  1},{109,  8,  2}};
    // // test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);



    // n = 40;
    // alpha = 0.035;
    // strategy = {{ 83,  8,  1},{ 93,  8,  1},{108,  8,  1},{117,  8,  1},{119,  4,  1},{133,  4,  1}};
    // test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);



    // n = 40;
    // alpha = 0.045;
    // strategy = {{ 79,  8,  1},{ 89,  8,  1},{117,  8,  2},{117,  4,  1},{123,  4,  1},{135,  4,  1},{148,  4,  1},{156,  2,  1}};
    // test_lwechal_from_gsa_and_original_instance(n, alpha, strategy);



}