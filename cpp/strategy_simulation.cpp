// #include <boost/math/distributions/chi_squared.hpp>
#include <iostream>
#include "framework/est.h"

using namespace std;
// using namespace boost;



void sim_strategy(Params* params, vector<double> l, vector<tuple<int,int,int>> strategy, double sigma){
    cout<<"cost_model = "<<params->cost_model<<endl;
    int dim = int(l.size());
    BKZJSim* sim = new BKZJSim(params,dim);
    COST* cost = new COST(params);
    double Gcum = 0., Bcum = 0., cum_pr = 0., rem_pr = 1., GBKZ = 0.;
    pair<double,double> G;
    for(int i = 0; i<int(strategy.size()); i++){
        int beta = get<0>(strategy[i]), jump = get<1>(strategy[i]), tours = get<2>(strategy[i]);
        for(int t = 0; t< tours; t++){
            int beta_ = get_beta_(params, beta, jump, dim);
            sim -> simulate(l,l,beta,jump,1);
            double slope = get_current_slope(l,0,dim);
            boost::math::chi_squared chisquare(beta_);
            // cout<<beta_<<","<<beta<<endl;
            double pr = boost::math::cdf(chisquare,pow(2,2.*l[dim-beta_]));
            // FP_NR<FT> pr = boost::math::cdf(chisquare,pow(2,2.*l[dim-beta_]));
            
            G = cost->bkz_cost(dim,beta,jump,params->cost_model);

            if(params->verbose)
                printf("Strategy (%d,%d,%d), slope = %lf, sim-cost = %3.7f log(sec)\n", beta,jump,t+1,slope, G.first );
            
            GBKZ = log2(pow(2,GBKZ)+pow(2,G.first));
            
            if(not params->worst_case){
                Gcum = log2(pow(2,Gcum)+pow(2,GBKZ)*rem_pr*pr);
                Bcum = log2(pow(2,Bcum)+pow(2,G.second)*rem_pr*pr);
            }
            else{
                Gcum = log2(pow(2,Gcum)+pow(2,G.first));
                Bcum = max(Bcum, G.second);
            }

            cum_pr += rem_pr * pr;
            rem_pr = 1. - cum_pr;
        } 
    }

    // print_vector(l,0,dim);
    for(int i = 0; i < dim; i++){
        l[i] -= log2(sigma);
    }


    tuple<int,int,double,double,double> dsvp_t_;
    if(params->worst_case)
        dsvp_t_ = dsvp_predict(l, 0., cost, params->cost_model, make_pair(Gcum, Bcum));
    else
        dsvp_t_ = dsvp_predict(l, cum_pr, cost, params->cost_model, make_pair(GBKZ, G.second));
        cout<<"cum_pr = "<<cum_pr<<endl;
    int dsvp = get<1>(dsvp_t_);
    // int f = wrapper_default_dim4free_fun(dsvp);
    int f = get_f_for_pump(params,dsvp);
    // int f = dims4free(dsvp);
    if(params->cost_model==1)
        printf("pump-{%d,%d,%d}, sim-pump cost = %3.7f sec\n",  dim - dsvp, dsvp, f,  get<4>(dsvp_t_)); 
    if(params->cost_model==2)
        printf("pump-{%d,%d,%d}, sim-pump cost = %3.7f sec\n",  dim - dsvp, dsvp, f,  pow(2,get<4>(dsvp_t_)));  
         
    Gcum = log2(pow(2,Gcum)+pow(2,get<4>(dsvp_t_)));
    Bcum = max(Bcum, get<3>(dsvp_t_));
    if(params->cost_model==2)
        cout<<"Gcum = "<<pow(2,Gcum)<<", Bcum = "<<pow(2,Bcum)<<endl;
    if(params->cost_model==1)
        cout<<"Gcum = "<< Gcum <<", Bcum = "<< Bcum<<endl;
    cout<<"============================="<<endl;
}


//Simulate the stratey from original lwe instance 
void test_lwechal_from_original_instance(Params* params, int n, double alpha, vector<tuple<int,int,int>> strategy){
    LWEchal* lwechal = gen_lwechal_instance(n, alpha);
    int dim = lwechal->dim;
    FP_NR<FT> dvol = lwechal->dvol;
    vector<double> l = lwechal->log_rr, l_;
    double  sigma = lwechal->alpha * lwechal->q;
    printf("No sigma normalization,");
    sim_strategy(params, l, strategy,sigma);

    // printf("After a sigma normalization,");
    // for(int i = 0; i < dim; i++){
    //     l[i] -=  log2(sigma);
    // }
    // double slope = get_current_slope(l,0,dim);
    // printf("slope = %f\n", slope);
    // sim_strategy(params, l, strategy,1.);
}


//Simulate the stratey from gsa-gs-lengths and original lwe instance 
void test_lwechal_from_gsa(Params* params, int dim, double dvol, vector<tuple<int,int,int>> strategy){
    printf("Generate gs-lengths by GSA assumption...\n");
    vector<double>  l = gen_simulated_gso(dim, dvol);
    double slope = get_current_slope(l,0,dim);
    cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;

    sim_strategy(params, l, strategy, 1.);
}


void test_nist_from_gsa(Params* params,int n, int m, int q,  map<int,double> D_e, map<int,double> D_s, vector<tuple<int,int,int>> strategy){
    printf("Generate gs-lengths by GSA assumption...\n");
    LWEchal* lwechal = gen_LWE_instance_with_input_distribution( n, q, m, D_e, D_s, params->verbose);
    vector<double>  l = gen_simulated_gso(lwechal->dim, lwechal->dvol);
    double slope = get_current_slope(l,0,lwechal->dim);
    cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;

    sim_strategy(params, l, strategy, 1.);
}


int main(){

    // int n = 40;
    // double alpha = 0.035;
    // Params* params = new Params;
    // params->cost_model = 2;
    // params->practical_pnjbkz_d4f = 3;
    // params->practical_pump_d4f = 2;
    // params->worst_case = true;
    // params->verbose = true;

    // vector<tuple<int,int,int>> strategy = {{83, 8, 1}, {93, 8, 1}, {108, 8, 1}, {117, 8, 1}, {119, 4, 1}, {133, 4, 1}};
    // test_lwechal_from_original_instance(params, n, alpha, strategy);


    map<int,double> D_e, D_s;
    int n = 40, m , q, eta;
    double alpha = 0.025;
    Params* params = new Params;
    params->cost_model = 2;
    params->practical_pnjbkz_d4f = 3;
    params->practical_pump_d4f = 3;
    params->worst_case = true;
    params->verbose = true;

    vector<tuple<int,int,int>> strategy = {{ 91,  8,  1},{104,  8,  1}};
    // test_lwechal_from_original_instance(params, n, alpha, strategy);

    // n = 80, alpha = 0.005;
    // strategy = {{73,8,2},{77,8,5},{77,4,1},{117,10,2},{119,10,1}};
    // test_lwechal_from_original_instance(params, n, alpha, strategy);


    // n = 40, alpha = 0.030;
    // strategy = {{73,8,1},{89,9,1},{117,10,1},{119,10,1}};
    // test_lwechal_from_original_instance(params, n, alpha, strategy);

    // n = 45, alpha = 0.020;
    // strategy = {{79, 8,1}, {91, 8,1}, {108, 8,1}};
    // strategy = {{73,8,1},{90,9,1},{117,10,1}};
    // test_lwechal_from_original_instance(params, n, alpha, strategy);


    // n = 40, alpha = 0.025;
    // // strategy = {{79, 8,1}, {91, 8,1}, {108, 8,1}};
    // strategy = {{79,8,3}};
    // // strategy = {{91,9,1},{114,10,1}};
    // test_lwechal_from_original_instance(params, n, alpha, strategy);


    n = 80, alpha = 0.005;

    // strategy = {{89,9,1},{90,9,1},{117,10,3},{119,10,1}};
    // strategy = {{91, 9, 1}, {111, 11, 2}, {117, 11, 2}, {120, 11, 1}};
    strategy = {{73,8,1},{89,9,1},{90,9,1},{114,10,1},{116,10,1},{117,10,1},{119,10,1}};
    test_lwechal_from_original_instance(params, n, alpha, strategy);


    /*
    params->worst_case = false;
    params->cost_model = 1;
    params->theo_pnjbkz_d4f = 2;
    params->theo_pump_d4f = 2;

 
    
    printf("============= Dilithium-II\n");
    n = 5*256, m = 6*256, q = 8380417, eta = 4;
    D_s={},D_e={};
    // for(int x=-eta; x<=eta; x++){
    //     D_s[x] = one/(2*eta+1);
    //     D_e[x] = one/(2*eta+1);
    // }
    for(int x=-eta; x<=eta; x++){
        D_s[x] = 1./(2*eta+1);
        D_e[x] = 1./(2*eta+1);
    }
    strategy = {{  50,   1,   1},{  51,   1,   1},{  52,   1,   1},{  53,   1,   1},{  54,   1,   1},{  55,   1,   1},{  56,   1,   1},{  57,   1,   1},{  58,   1,   1},{  59,   1,   1},{  60,   1,   1},{  61,   1,   1},{  62,   1,   1},{  63,   1,   1},{  64,   1,   1},{  65,   1,   1},{  66,   1,   1},{  67,   1,   1},{  68,   1,   1},{  69,   1,   1},{  70,   1,   1},{  71,   1,   1},{  72,   1,   1},{  73,   1,   1},{  74,   1,   1},{  75,   1,   1},{  76,   1,   1},{  77,   1,   1},{  78,   1,   1},{  79,   1,   1},{  80,   1,   1},{  81,   1,   1},{  82,   1,   1},{  83,   1,   1},{  84,   1,   1},{  85,   1,   1},{  86,   1,   1},{  87,   1,   1},{  88,   1,   1},{  89,   1,   1},{  90,   1,   1},{  91,   1,   1},{  92,   1,   1},{  93,   1,   1},{  94,   1,   1},{  95,   1,   1},{  96,   1,   1},{  97,   1,   1},{  98,   1,   1},{  99,   1,   1},{ 100,   1,   1},{ 101,   1,   1},{ 102,   1,   1},{ 103,   1,   1},{ 104,   1,   1},{ 105,   1,   1},{ 106,   1,   1},{ 107,   1,   1},{ 108,   1,   1},{ 109,   1,   1},{ 110,   1,   1},{ 111,   1,   1},{ 112,   1,   1},{ 113,   1,   1},{ 114,   1,   1},{ 115,   1,   1},{ 116,   1,   1},{ 117,   1,   1},{ 118,   1,   1},{ 119,   1,   1},{ 120,   1,   1},{ 121,   1,   1},{ 122,   1,   1},{ 123,   1,   1},{ 124,   1,   1},{ 125,   1,   1},{ 126,   1,   1},{ 127,   1,   1},{ 128,   1,   1},{ 129,   1,   1},{ 130,   1,   1},{ 131,   1,   1},{ 132,   1,   1},{ 133,   1,   1},{ 134,   1,   1},{ 135,   1,   1},{ 136,   1,   1},{ 137,   1,   1},{ 138,   1,   1},{ 139,   1,   1},{ 140,   1,   1},{ 141,   1,   1},{ 142,   1,   1},{ 143,   1,   1},{ 144,   1,   1},{ 145,   1,   1},{ 146,   1,   1},{ 147,   1,   1},{ 148,   1,   1},{ 149,   1,   1},{ 150,   1,   1},{ 151,   1,   1},{ 152,   1,   1},{ 153,   1,   1},{ 154,   1,   1},{ 155,   1,   1},{ 156,   1,   1},{ 157,   1,   1},{ 158,   1,   1},{ 159,   1,   1},{ 160,   1,   1},{ 161,   1,   1},{ 162,   1,   1},{ 163,   1,   1},{ 164,   1,   1},{ 165,   1,   1},{ 166,   1,   1},{ 167,   1,   1},{ 168,   1,   1},{ 169,   1,   1},{ 170,   1,   1},{ 171,   1,   1},{ 172,   1,   1},{ 173,   1,   1},{ 174,   1,   1},{ 175,   1,   1},{ 176,   1,   1},{ 177,   1,   1},{ 178,   1,   1},{ 179,   1,   1},{ 180,   1,   1},{ 181,   1,   1},{ 182,   1,   1},{ 183,   1,   1},{ 184,   1,   1},{ 185,   1,   1},{ 186,   1,   1},{ 187,   1,   1},{ 188,   1,   1},{ 189,   1,   1},{ 190,   1,   1},{ 191,   1,   1},{ 192,   1,   1},{ 193,   1,   1},{ 194,   1,   1},{ 195,   1,   1},{ 196,   1,   1},{ 197,   1,   1},{ 198,   1,   1},{ 199,   1,   1},{ 200,   1,   1},{ 201,   1,   1},{ 202,   1,   1},{ 203,   1,   1},{ 204,   1,   1},{ 205,   1,   1},{ 206,   1,   1},{ 207,   1,   1},{ 208,   1,   1},{ 209,   1,   1},{ 210,   1,   1},{ 211,   1,   1},{ 212,   1,   1},{ 213,   1,   1},{ 214,   1,   1},{ 215,   1,   1},{ 216,   1,   1},{ 217,   1,   1},{ 218,   1,   1},{ 219,   1,   1},{ 220,   1,   1},{ 221,   1,   1},{ 222,   1,   1},{ 223,   1,   1},{ 224,   1,   1},{ 225,   1,   1},{ 226,   1,   1},{ 227,   1,   1},{ 228,   1,   1},{ 229,   1,   1},{ 230,   1,   1},{ 231,   1,   1},{ 232,   1,   1},{ 233,   1,   1},{ 234,   1,   1},{ 235,   1,   1},{ 236,   1,   1},{ 237,   1,   1},{ 238,   1,   1},{ 239,   1,   1},{ 240,   1,   1},{ 241,   1,   1},{ 242,   1,   1},{ 243,   1,   1},{ 244,   1,   1},{ 245,   1,   1},{ 246,   1,   1},{ 247,   1,   1},{ 248,   1,   1},{ 249,   1,   1},{ 250,   1,   1},{ 251,   1,   1},{ 252,   1,   1},{ 253,   1,   1},{ 254,   1,   1},{ 255,   1,   1},{ 256,   1,   1},{ 257,   1,   1},{ 258,   1,   1},{ 259,   1,   1},{ 260,   1,   1},{ 261,   1,   1},{ 262,   1,   1},{ 263,   1,   1},{ 264,   1,   1},{ 265,   1,   1},{ 266,   1,   1},{ 267,   1,   1},{ 268,   1,   1},{ 269,   1,   1},{ 270,   1,   1},{ 271,   1,   1},{ 272,   1,   1},{ 273,   1,   1},{ 274,   1,   1},{ 275,   1,   1},{ 276,   1,   1},{ 277,   1,   1},{ 278,   1,   1},{ 279,   1,   1},{ 280,   1,   1},{ 281,   1,   1},{ 282,   1,   1},{ 283,   1,   1},{ 284,   1,   1},{ 285,   1,   1},{ 286,   1,   1},{ 287,   1,   1},{ 288,   1,   1},{ 289,   1,   1},{ 290,   1,   1},{ 291,   1,   1},{ 292,   1,   1},{ 293,   1,   1},{ 294,   1,   1},{ 295,   1,   1},{ 296,   1,   1},{ 297,   1,   1},{ 298,   1,   1},{ 299,   1,   1},{ 300,   1,   1},{ 301,   1,   1},{ 302,   1,   1},{ 303,   1,   1},{ 304,   1,   1},{ 305,   1,   1},{ 306,   1,   1},{ 307,   1,   1},{ 308,   1,   1},{ 309,   1,   1},{ 310,   1,   1},{ 311,   1,   1},{ 312,   1,   1},{ 313,   1,   1},{ 314,   1,   1},{ 315,   1,   1},{ 316,   1,   1},{ 317,   1,   1},{ 318,   1,   1},{ 319,   1,   1},{ 320,   1,   1},{ 321,   1,   1},{ 322,   1,   1},{ 323,   1,   1},{ 324,   1,   1},{ 325,   1,   1},{ 326,   1,   1},{ 327,   1,   1},{ 328,   1,   1},{ 329,   1,   1},{ 330,   1,   1},{ 331,   1,   1},{ 332,   1,   1},{ 333,   1,   1},{ 334,   1,   1},{ 335,   1,   1},{ 336,   1,   1},{ 337,   1,   1},{ 338,   1,   1},{ 339,   1,   1},{ 340,   1,   1},{ 341,   1,   1},{ 342,   1,   1},{ 343,   1,   1},{ 344,   1,   1},{ 345,   1,   1},{ 346,   1,   1},{ 347,   1,   1},{ 348,   1,   1},{ 349,   1,   1},{ 350,   1,   1},{ 351,   1,   1},{ 352,   1,   1},{ 353,   1,   1},{ 354,   1,   1},{ 355,   1,   1},{ 356,   1,   1},{ 357,   1,   1},{ 358,   1,   1},{ 359,   1,   1},{ 360,   1,   1},{ 361,   1,   1},{ 362,   1,   1},{ 363,   1,   1},{ 364,   1,   1},{ 365,   1,   1},{ 366,   1,   1},{ 367,   1,   1},{ 368,   1,   1},{ 369,   1,   1},{ 370,   1,   1},{ 371,   1,   1},{ 372,   1,   1},{ 373,   1,   1},{ 374,   1,   1},{ 375,   1,   1},{ 376,   1,   1},{ 377,   1,   1},{ 378,   1,   1},{ 379,   1,   1},{ 380,   1,   1},{ 381,   1,   1},{ 382,   1,   1},{ 383,   1,   1},{ 384,   1,   1},{ 385,   1,   1},{ 386,   1,   1},{ 387,   1,   1},{ 388,   1,   1},{ 389,   1,   1},{ 390,   1,   1},{ 391,   1,   1},{ 392,   1,   1},{ 393,   1,   1},{ 394,   1,   1},{ 395,   1,   1},{ 396,   1,   1},{ 397,   1,   1},{ 398,   1,   1},{ 399,   1,   1},{ 400,   1,   1},{ 401,   1,   1},{ 402,   1,   1},{ 403,   1,   1},{ 404,   1,   1},{ 405,   1,   1},{ 406,   1,   1},{ 407,   1,   1},{ 408,   1,   1},{ 409,   1,   1},{ 410,   1,   1},{ 411,   1,   1},{ 412,   1,   1},{ 413,   1,   1},{ 414,   1,   1},{ 415,   1,   1},{ 416,   1,   1},{ 417,   1,   1},{ 418,   1,   1},{ 419,   1,   1},{ 420,   1,   1},{ 421,   1,   1},{ 422,   1,   1},{ 423,   1,   1},{ 424,   1,   1},{ 425,   1,   1},{ 426,   1,   1},{ 427,   1,   1},{ 428,   1,   1},{ 429,   1,   1},{ 430,   1,   1},{ 431,   1,   1},{ 432,   1,   1},{ 433,   1,   1},{ 434,   1,   1},{ 435,   1,   1},{ 436,   1,   1},{ 437,   1,   1},{ 438,   1,   1},{ 439,   1,   1},{ 440,   1,   1},{ 441,   1,   1},{ 442,   1,   1},{ 443,   1,   1},{ 444,   1,   1},{ 445,   1,   1},{ 446,   1,   1},{ 447,   1,   1},{ 448,   1,   1},{ 449,   1,   1},{ 450,   1,   1},{ 451,   1,   1},{ 452,   1,   1},{ 453,   1,   1},{ 454,   1,   1},{ 455,   1,   1},{ 456,   1,   1},{ 457,   1,   1},{ 458,   1,   1},{ 459,   1,   1},{ 460,   1,   1},{ 461,   1,   1},{ 462,   1,   1},{ 463,   1,   1},{ 464,   1,   1},{ 465,   1,   1},{ 466,   1,   1},{ 467,   1,   1},{ 468,   1,   1},{ 469,   1,   1},{ 470,   1,   1},{ 471,   1,   1},{ 472,   1,   1},{ 473,   1,   1},{ 474,   1,   1},{ 475,   1,   1},{ 476,   1,   1},{ 477,   1,   1},{ 478,   1,   1},{ 479,   1,   1},{ 480,   1,   1},{ 481,   1,   1},{ 482,   1,   1},{ 483,   1,   1},{ 484,   1,   1},{ 485,   1,   1},{ 486,   1,   1},{ 487,   1,   1},{ 488,   1,   1},{ 489,   1,   1},{ 490,   1,   1},{ 491,   1,   1},{ 492,   1,   1},{ 493,   1,   1},{ 494,   1,   1},{ 495,   1,   1},{ 496,   1,   1},{ 497,   1,   1},{ 498,   1,   1},{ 499,   1,   1},{ 500,   1,   1},{ 501,   1,   1},{ 502,   1,   1},{ 503,   1,   1},{ 504,   1,   1},{ 505,   1,   1},{ 506,   1,   1},{ 507,   1,   1},{ 508,   1,   1},{ 509,   1,   1},{ 510,   1,   1},{ 511,   1,   1},{ 512,   1,   1},{ 513,   1,   1},{ 514,   1,   1},{ 515,   1,   1},{ 516,   1,   1},{ 517,   1,   1},{ 518,   1,   1},{ 519,   1,   1},{ 520,   1,   1},{ 521,   1,   1},{ 522,   1,   1},{ 523,   1,   1},{ 524,   1,   1},{ 525,   1,   1},{ 526,   1,   1},{ 527,   1,   1},{ 528,   1,   1},{ 529,   1,   1},{ 530,   1,   1},{ 531,   1,   1},{ 532,   1,   1},{ 533,   1,   1},{ 534,   1,   1},{ 535,   1,   1},{ 536,   1,   1},{ 537,   1,   1},{ 538,   1,   1},{ 539,   1,   1},{ 540,   1,   1},{ 541,   1,   1},{ 542,   1,   1},{ 543,   1,   1},{ 544,   1,   1},{ 545,   1,   1},{ 546,   1,   1},{ 547,   1,   1},{ 548,   1,   1},{ 549,   1,   1},{ 550,   1,   1},{ 551,   1,   1},{ 552,   1,   1},{ 553,   1,   1},{ 554,   1,   1},{ 555,   1,   1},{ 556,   1,   1},{ 557,   1,   1},{ 558,   1,   1},{ 559,   1,   1},{ 560,   1,   1},{ 561,   1,   1},{ 562,   1,   1},{ 563,   1,   1},{ 564,   1,   1},{ 565,   1,   1},{ 566,   1,   1},{ 567,   1,   1},{ 568,   1,   1},{ 569,   1,   1},{ 570,   1,   1},{ 571,   1,   1},{ 572,   1,   1},{ 573,   1,   1},{ 574,   1,   1},{ 575,   1,   1},{ 576,   1,   1},{ 577,   1,   1},{ 578,   1,   1},{ 579,   1,   1},{ 580,   1,   1},{ 581,   1,   1},{ 582,   1,   1},{ 583,   1,   1},{ 584,   1,   1},{ 585,   1,   1},{ 586,   1,   1},{ 587,   1,   1},{ 588,   1,   1},{ 589,   1,   1},{ 590,   1,   1},{ 591,   1,   1},{ 592,   1,   1},{ 593,   1,   1},{ 594,   1,   1},{ 595,   1,   1},{ 596,   1,   1},{ 597,   1,   1},{ 598,   1,   1},{ 599,   1,   1},{ 600,   1,   1},{ 601,   1,   1},{ 602,   1,   1},{ 603,   1,   1},{ 604,   1,   1},{ 605,   1,   1},{ 606,   1,   1},{ 607,   1,   1},{ 608,   1,   1},{ 609,   1,   1},{ 610,   1,   1},{ 611,   1,   1},{ 612,   1,   1},{ 613,   1,   1},{ 614,   1,   1},{ 615,   1,   1},{ 616,   1,   1},{ 617,   1,   1},{ 618,   1,   1},{ 619,   1,   1},{ 620,   1,   1},{ 621,   1,   1},{ 622,   1,   1},{ 623,   1,   1},{ 624,   1,   1},{ 625,   1,   1},{ 626,   1,   1},{ 627,   1,   1},{ 628,   1,   1}};
    // strategy = {};
    // for(int i = 50; i<= 628; i++){
    // for(int i = 0; i< stragy.size(); i++){
        // if(stragy[i][0] == i+50)
        // strategy.insert(strategy.end(),{i,1,1});
    // }
    test_nist_from_gsa(params, n, m, q, D_e, D_s,strategy);
    */

}