// #include <boost/math/distributions/chi_squared.hpp>
#include <iostream>
#include "framework/est.h"

using namespace std;
// using namespace boost;



void sim_strategy(Params* params, vector<double> l, vector<tuple<int,int,int>> strategy, double sigma){
    cout<<"cost_model = "<<params->cost_model<<endl;
    int dim = int(l.size());
    BKZJSim* sim = new BKZJSim(params,dim);
    COST* cost = new COST(params);
    double Gcum = -1000., Bcum = -1000., cum_pr = 0., rem_pr = 1., GBKZ = -1000.;
    pair<double,double> G;

    for(int i = 0; i<int(strategy.size()); i++){
        int beta = get<0>(strategy[i]), jump = get<1>(strategy[i]), tours = get<2>(strategy[i]);
        for(int t = 0; t< tours; t++){
            int beta_ = get_beta_(params, beta, jump, dim);
            sim -> simulate(l,l,beta,jump,1);

            // print_vector(l,0,l.size());

            double slope = get_current_slope(l,0,dim);
            boost::math::chi_squared chisquare(beta_);
            // cout<<beta_<<","<<beta<<endl;
            double pr = boost::math::cdf(chisquare,pow(2,2.*l[dim-beta_]));
            // FP_NR<FT> pr = boost::math::cdf(chisquare,pow(2,2.*l[dim-beta_]));
        
            G = cost->bkz_cost(dim,beta,jump,params->cost_model);
            // printf("beta = %d", beta);
            // cout<<"G.first: "<<G.first<<endl;
            // print_vector(l);
            
            int jub  = jump_upper_bound(params,beta,l);

            // printf("d4f upper bound for beta  = %d is %d\n", beta, jub);

            GBKZ = log2(pow(2,GBKZ)+pow(2,G.first));
            // printf("Gbkz-one: %f", );
            // cout<<"GBKZ = "<<GBKZ<<", beta = "<<beta<<endl;
            if(not params->worst_case){
                Gcum = log2(pow(2,Gcum)+pow(2,GBKZ)*rem_pr*pr);
                Bcum = log2(pow(2,Bcum)+pow(2,G.second)*rem_pr*pr);
            }
            else{
                Gcum = GBKZ;
                Bcum = max(Bcum, G.second);
            }

            if(params->verbose)
                // printf("Strategy (%d,%d,%d), slope = %lf, pr = %e, l[dim-beta_] = %f, sim-cost = %3.7f log(sec), G_cum = %3.7f log(sec), G_BKZ = %3.7f log(sec), l[0] = %f\n", beta,jump,t+1,slope, pr, l[dim-beta_],  G.first, Gcum, GBKZ , l[0] );
                printf("(%d,%d,%d) %lf %lf\n", beta,jump,t+1,slope,  GBKZ );

            cum_pr += rem_pr * pr;
            rem_pr = 1. - cum_pr;

            // cout<<"cum_pr = "<<cum_pr<<endl;
        } 
    }

    // print_vector(l,0,dim);
    for(int i = 0; i < dim; i++){
        l[i] -= log2(sigma);
    }


    tuple<int,int,double,double,double> dsvp_t_;
    if(params->worst_case)
        dsvp_t_ = dsvp_predict(l, 0., cost, params->cost_model, make_pair(Gcum, Bcum));
    else
        dsvp_t_ = dsvp_predict(l, cum_pr, cost, params->cost_model, make_pair(GBKZ, G.second));
        cout<<"cum_pr = "<<cum_pr<<endl;
    int dsvp = get<1>(dsvp_t_);
    // int f = wrapper_default_dim4free_fun(dsvp);
    int f = get_f_for_pump(params,dsvp);
    // int f = dims4free(dsvp);
    if(params->cost_model==1)
        printf("pump-{%d,%d,%d}, Tdsvp = %3.7f sec, PSC = %3.7f sec\n",  dim - dsvp, dsvp, f,  get<2>(dsvp_t_), get<4>(dsvp_t_)); 
        
    if(params->cost_model==2)
        printf("pump-{%d,%d,%d}, PSC = %3.7f sec\n",  dim - dsvp, dsvp, f,  get<4>(dsvp_t_)); 

    if(not params->worst_case)
        Gcum = log2(pow(2,Gcum)+pow(2,get<2>(dsvp_t_)));
    else
        Gcum = log2(pow(2,Gcum)+pow(2,get<4>(dsvp_t_)));
         
    // Gcum = log2(pow(2,Gcum)+pow(2,get<4>(dsvp_t_)));
    // printf("(slope = %e, G_BKZ = %e log2(gate), B_BKZ = %e log2(bit), cum-pr = %e, pump-{%d,%d,%d}, G_dsvp = %e log2(gate), B_dsvp = %e bit, avgG = %e log2(gate), avgB = %e log2(bit),  G = %e log2(gate), min_GB.first = %e log2(gate), leaf = %d)\n",  bs.slope, bs.cum_GB_BKZ.first, bs.cum_GB_BKZ.second, bs.cum_pr,  d- get<1>(bs.dsvp_t), get<1>(bs.dsvp_t), get<1>(bs.dsvp_t) - get<0>(bs.dsvp_t), get<2>(bs.dsvp_t),get<3>(bs.dsvp_t), bs.avg_GB.first, bs.avg_GB.second, bs.GB_nopr.first, bs.min_GB.first,bs.leaf);  
    cout<<"S(beta,jump,tours):[";
    for(int i = 0; i < int(strategy.size()); i ++){
        printf("(%d,%d,%d)",get<0>(strategy[i]),get<1>(strategy[i]),get<2>(strategy[i]));
        if(i!=int(strategy.size()) - 1)
            printf(",");
    }
    cout<<"]"<<endl;

    Bcum = max(Bcum, get<3>(dsvp_t_));
    if(params->cost_model==2)
        cout<<"Gcum = "<<pow(2,Gcum)<<", Bcum = "<<pow(2,Bcum)<<endl;
    if(params->cost_model==1)
        cout<<"Gcum = "<< Gcum <<", Bcum = "<< Bcum<<endl;
    cout<<"============================="<<endl;
}


//Simulate the stratey from original lwe instance 
void test_lwechal_from_original_instance(Params* params, int n, double alpha, vector<tuple<int,int,int>> strategy){
    LWEchal* lwechal = gen_lwechal_instance(n, alpha);
    int dim = lwechal->dim;
    FP_NR<FT> dvol = lwechal->dvol;
    vector<double> l = lwechal->log_rr, l_;
    double  sigma = lwechal->alpha * lwechal->q;
    // printf("No sigma normalization,");
    // sim_strategy(params, l, strategy,sigma);

    printf("After a sigma normalization,");
    for(int i = 0; i < dim; i++){
        l[i] -=  log2(sigma);
    }
    // print_vector(l,0,dim);
    double slope = get_current_slope(l,0,dim);
    printf("slope = %f\n", slope);
    sim_strategy(params, l, strategy,1.);
}


//Simulate the stratey from gsa-gs-lengths and original lwe instance 
void test_lwechal_from_gsa(Params* params, int dim, double dvol, vector<tuple<int,int,int>> strategy){
    printf("Generate gs-lengths by GSA assumption...\n");
    vector<double>  l = gen_simulated_gso(dim, dvol);
    double slope = get_current_slope(l,0,dim);
    cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;

    sim_strategy(params, l, strategy, 1.);
}


void test_nist_from_gsa(Params* params,int n, int m, int q,  map<int,double> D_e, map<int,double> D_s, vector<tuple<int,int,int>> strategy){
    printf("Generate gs-lengths by GSA assumption...\n");
    LWEchal* lwechal = gen_LWE_instance_with_input_distribution( n, q, m, D_e, D_s, params->verbose);
    vector<double>  l = gen_simulated_gso(lwechal->dim, lwechal->dvol);
    double slope = get_current_slope(l,0,lwechal->dim);
    cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;

    sim_strategy(params, l, strategy, 1.);
}


int main(){

    // vector<tuple<int,int,int>> strategy;
    // int n;
    // double alpha;
    // Params* params = new Params;
    // params->cost_model = 2;
    // params->practical_pnjbkz_d4f = 3;
    // params->practical_pump_d4f = 2;
    // params->worst_case = true;
    // params->verbose = true;

    // vector<tuple<int,int,int>> strategy = {{83, 8, 1}, {93, 8, 1}, {108, 8, 1}, {117, 8, 1}, {119, 4, 1}, {133, 4, 1}};
    // test_lwechal_from_original_instance(params, n, alpha, strategy);


    map<int,double> D_e, D_s;
    int n, m , q, eta;
    double alpha;
    Params* params = new Params;
    params->cost_model = 2;
    params->practical_pnjbkz_d4f = 3;
    params->practical_pump_d4f = 3;
    params->worst_case = true;
    params->verbose = true;
    vector<tuple<int,int,int>> strategy;
 


    // n = 40, alpha = 0.030;
    // strategy = {{73,8,1},{89,9,1},{117,10,1},{119,10,1}};
    // test_lwechal_from_original_instance(params, n, alpha, strategy);



    // params->worst_case = false;
    // params->cost_model = 1;
    // params->theo_pnjbkz_d4f = 2;
    // params->theo_pump_d4f = 2;
    // params->list_decoding = "agps20"; //"matzov22";
    // printf("============= Kyber-1024\n");
    // n = 1024, m = 1024, q = 3329;
    // D_s = build_centered_binomial_law(2);
    // D_e = D_s;
    // // strategy = {};
    // // for(int i = 50; i<= 903; i++){
    // //     strategy.insert(strategy.end(),{i,1,1});
    // // }
    // // test_nist_from_gsa(params, n, m, q, D_e, D_s,strategy);


    // strategy = {{50,7,1},{51,7,1},{52,7,1},{53,7,1},{78,1,1},{79,7,1},{79,4,1},{80,7,1},{80,4,1},{81,7,1},{82,7,1},{82,4,1},{83,7,1},{83,4,1},{84,7,1},{84,4,1},{85,7,1},{85,4,1},{86,7,1},{86,4,1},{87,7,1},{87,4,1},{88,7,1},{88,4,1},{89,7,1},{89,4,1},{90,7,1},{90,4,1},{91,7,1},{91,4,1},{92,7,1},{92,4,1},{93,7,1},{93,4,1},{94,7,1},{94,4,1},{95,7,1},{95,4,1},{96,7,1},{97,7,1},{97,4,1},{98,7,1},{98,4,1},{99,7,1},{99,4,1},{100,7,1},{100,4,1},{101,7,1},{101,4,1},{102,7,1},{102,4,1},{103,7,1},{103,4,1},{104,7,1},{104,4,1},{105,7,1},{105,4,1},{106,7,1},{106,4,1},{107,7,1},{107,4,1},{108,7,1},{108,4,1},{109,7,1},{109,4,1},{110,7,1},{111,7,1},{111,4,1},{112,7,1},{112,4,1},{113,7,1},{113,4,1},{114,7,1},{114,4,1},{115,7,1},{115,4,1},{116,7,1},{116,4,1},{117,7,1},{117,4,1},{118,7,1},{118,4,1},{119,7,1},{119,4,1},{120,7,1},{120,4,1},{121,7,1},{121,4,1},{122,7,1},{122,4,1},{123,7,1},{123,4,1},{124,7,1},{125,7,1},{125,4,1},{126,7,1},{126,4,1},{127,7,1},{127,4,1},{128,7,1},{128,4,1},{129,7,1},{129,4,1},{130,7,1},{130,4,1},{131,7,1},{131,4,1},{132,7,1},{132,4,1},{133,7,1},{133,4,1},{134,7,1},{134,4,1},{135,7,1},{135,4,1},{136,7,1},{136,4,1},{138,10,1},{138,7,1},{138,4,1},{139,10,1},{139,7,1},{140,10,1},{140,4,1},{141,10,1},{142,10,1},{142,4,1},{143,10,1},{144,10,1},{144,4,1},{145,10,1},{146,10,1},{146,4,1},{147,10,1},{148,10,1},{148,7,1},{148,4,1},{149,10,1},{149,7,1},{149,4,1},{150,10,1},{150,7,1},{150,4,1},{151,10,1},{151,7,1},{152,7,1},{152,4,1},{153,10,1},{153,7,1},{153,4,1},{154,10,1},{154,7,1},{154,4,1},{155,10,1},{155,7,1},{155,4,1},{156,10,1},{156,7,1},{156,4,1},{157,10,1},{157,7,1},{157,4,1},{158,10,1},{158,7,1},{158,4,1},{159,10,1},{159,7,1},{159,4,1},{160,10,1},{160,7,1},{160,4,1},{161,10,1},{161,7,1},{161,4,1},{162,10,1},{162,7,1},{162,4,1},{164,10,1},{164,7,1},{165,10,1},{166,10,1},{167,10,1},{168,10,1},{169,10,1},{170,10,1},{171,10,1},{172,10,1},{173,10,1},{173,7,1},{173,4,1},{174,10,1},{175,10,1},{175,7,1},{176,10,1},{177,10,1},{178,10,1},{179,10,1},{180,10,1},{181,10,1},{182,10,1},{182,7,1},{183,10,1},{184,10,1},{185,10,1},{186,10,1},{186,7,1},{187,10,1},{188,10,1},{189,10,1},{190,10,1},{191,10,1},{191,7,1},{193,10,1},{194,10,1},{195,10,1},{196,10,1},{197,10,1},{198,10,1},{198,7,1},{199,10,1},{199,7,1},{201,10,1},{203,10,1},{204,10,1},{205,10,1},{206,10,1},{207,10,1},{208,10,1},{209,10,1},{210,10,1},{210,7,1},{210,4,1},{211,4,1},{212,4,1},{214,4,1},{215,4,1},{216,4,1},{217,4,1},{218,4,1},{219,4,1},{220,4,1},{221,4,1},{222,4,1},{224,4,1},{225,4,1},{226,4,1},{227,4,1},{228,4,1},{229,4,1},{230,4,1},{231,4,1},{232,4,1},{233,4,1},{235,4,1},{236,4,1},{239,4,1},{240,4,1},{241,4,1},{242,4,1},{243,4,1},{245,4,1},{246,4,1},{248,4,1},{250,4,1},{251,4,1},{253,4,1},{254,4,1},{256,4,1},{257,4,1},{259,4,1},{261,4,1},{262,4,1},{264,4,1},{266,4,1},{268,4,1},{269,4,1},{271,4,1},{273,4,1},{275,4,1},{277,4,1},{279,4,1},{280,4,1},{284,4,1},{285,4,1},{286,4,1},{288,4,1},{291,4,1},{292,4,1},{294,4,1},{296,4,1},{299,4,1},{301,4,1},{303,4,1},{305,4,1},{307,4,1},{309,4,1},{312,4,1},{314,4,1},{316,4,1},{319,4,1},{321,4,1},{324,4,1},{326,4,1},{328,4,1},{331,4,1},{334,4,1},{336,4,1},{339,4,1},{342,4,1},{345,4,1},{347,4,1},{350,4,1},{353,4,1},{355,4,1},{359,4,1},{362,4,1},{365,4,1},{368,4,1},{371,4,1},{374,4,1},{377,4,1},{380,4,1},{383,4,1},{387,4,1},{390,4,1},{394,4,1},{397,4,1},{400,4,1},{404,4,1},{407,4,1},{411,4,1},{415,4,1},{419,4,1},{422,4,1},{427,4,1},{430,4,1},{434,4,1},{439,4,1},{443,4,1},{447,4,1},{451,4,1},{455,4,1},{460,4,1},{465,4,1},{469,4,1},{474,4,1},{479,4,1},{483,4,1},{489,4,1},{493,4,1},{499,4,1},{504,4,1},{509,4,1},{514,4,1},{520,4,1},{526,4,1},{532,4,1},{538,4,1},{543,4,1},{549,4,1},{555,4,1},{562,4,1},{568,4,1},{575,4,1},{581,4,1},{589,4,1},{595,4,1},{603,4,1},{610,4,1},{617,4,1},{626,4,1},{634,4,1},{641,4,1},{649,4,1},{658,4,1},{666,4,1},{676,4,1},{685,4,1},{694,4,1},{703,4,1},{714,4,1},{723,4,1},{734,4,1},{745,4,1},{755,4,1},{766,4,1},{778,4,1},{789,4,1},{801,4,1},{814,4,1},{826,4,1}};
    // test_nist_from_gsa(params, n, m, q, D_e, D_s,strategy);




    params->worst_case = false;
    params->cost_model = 1;
    params->theo_pnjbkz_d4f = 2;
    params->theo_pump_d4f = 2;
    params->list_decoding = "matzov22";




    params->cost_model = 2;
    params->practical_pnjbkz_d4f = 3;
    params->practical_pump_d4f = 3;
    int dim=222;
    double dvol = 522.7192362;
    n = 60;
    alpha = 0.010;
    // strategy = {{73,8,1},{89,9,1},{114,10,1},{114,10,1}};
    // // test_lwechal_from_gsa(params, dim, dvol, strategy);
    // test_lwechal_from_original_instance(params, n, alpha, strategy);

    // strategy =  {};
    // for(int i = 50; i<=100; i++)
    //     strategy.insert(strategy.end(),{i, 1, 1});
    // // test_lwechal_from_gsa(params, dim, dvol, strategy);
    // test_lwechal_from_original_instance(params, n, alpha, strategy);



    strategy =  {};
    for(int i = 10; i < 50; i++)
        strategy.insert(strategy.end(),{i, 1, 1});
    int b = 92;
    strategy.insert(strategy.end(),{b-20, 1, 1});
    strategy.insert(strategy.end(),{b-17, 1, 1});
    for(int i = b-14; i < dim; i+=2)
        strategy.insert(strategy.end(),{i, 1, 1});
    

    // test_lwechal_from_gsa(params, dim, dvol, strategy);
    test_lwechal_from_original_instance(params, n, alpha, strategy);




    printf("============= Dilithium-V\n");
    n = 7*256, m = 8*256, q = 8380417, eta = 2;
    D_s={},D_e={};
    // for(int x=-eta; x<=eta; x++){
    //     D_s[x] = one/(2*eta+1);
    //     D_e[x] = one/(2*eta+1);
    // }
    for(int x=-eta; x<=eta; x++){
        D_s[x] = 1./(2*eta+1);
        D_e[x] = 1./(2*eta+1);
    }

    strategy = {{50,4,1},{51,4,1},{52,4,1},{53,4,1},{54,4,1},{55,4,1},{56,4,1},{57,4,1},{58,4,1},{59,4,1},{60,4,1},{61,4,1},{62,4,1},{63,4,1},{64,4,1},{65,4,1},{66,4,1},{67,4,1},{68,4,1},{69,4,1},{70,4,1},{71,4,1},{72,4,1},{73,4,1},{74,4,1},{75,4,1},{76,4,1},{77,4,1},{78,4,1},{79,4,1},{80,4,1},{81,4,1},{82,4,1},{83,4,1},{84,4,1},{85,4,1},{86,4,1},{87,4,1},{88,4,1},{89,4,1},{90,4,1},{91,4,1},{92,4,1},{93,4,1},{94,4,1},{95,4,1},{96,4,1},{97,4,1},{98,4,1},{99,4,1},{100,4,1},{101,4,1},{102,4,1},{103,4,1},{104,4,1},{105,4,1},{106,4,1},{107,4,1},{108,4,1},{109,4,1},{110,4,1},{111,4,1},{112,4,1},{113,4,1},{114,4,1},{115,4,1},{116,4,1},{117,4,1},{118,4,1},{119,4,1},{120,4,1},{121,4,1},{122,4,1},{123,4,1},{124,4,1},{125,4,1},{126,4,1},{127,4,1},{128,4,1},{129,4,1},{130,4,1},{131,4,1},{132,4,1},{133,4,1},{134,4,1},{135,4,1},{136,4,1},{137,4,1},{138,4,1},{139,4,1},{140,4,1},{141,4,1},{142,4,1},{143,4,1},{144,4,1},{145,4,1},{146,4,1},{147,4,1},{148,4,1},{149,4,1},{150,4,1},{151,4,1},{152,4,1},{153,4,1},{154,4,1},{155,4,1},{156,4,1},{157,4,1},{158,4,1},{159,4,1},{160,4,1},{161,4,1},{162,4,1},{163,4,1},{164,4,1},{165,4,1},{166,4,1},{167,4,1},{168,4,1},{169,4,1},{170,4,1},{171,4,1},{172,4,1},{173,4,1},{174,4,1},{175,4,1},{176,4,1},{177,4,1},{178,4,1},{179,4,1},{180,4,1},{181,4,1},{182,4,1},{183,4,1},{184,4,1},{185,4,1},{186,4,1},{187,4,1},{188,4,1},{189,4,1},{190,4,1},{191,4,1},{192,4,1},{193,4,1},{194,4,1},{195,4,1},{196,4,1},{197,4,1},{198,4,1},{199,4,1},{200,4,1},{201,4,1},{202,4,1},{203,4,1},{204,4,1},{205,4,1},{206,4,1},{207,4,1},{208,4,1},{209,4,1},{210,4,1},{211,4,1},{212,4,1},{213,4,1},{214,4,1},{215,4,1},{216,4,1},{217,4,1},{218,4,1},{219,4,1},{220,4,1},{221,4,1},{222,4,1},{223,4,1},{224,4,1},{225,4,1},{226,4,1},{227,4,1},{228,4,1},{229,4,1},{230,4,1},{231,4,1},{232,4,1},{233,4,1},{234,4,1},{235,4,1},{236,4,1},{237,4,1},{238,4,1},{239,4,1},{240,4,1},{241,4,1},{242,4,1},{243,4,1},{244,4,1},{245,4,1},{246,4,1},{247,4,1},{248,4,1},{249,4,1},{250,4,1},{251,4,1},{252,4,1},{253,4,1},{254,4,1},{255,4,1},{256,4,1},{257,4,1},{258,4,1},{259,4,1},{260,4,1},{261,4,1},{262,4,1},{263,4,1},{264,4,1},{265,4,1},{266,4,1},{267,4,1},{268,4,1},{269,4,1},{270,4,1},{271,4,1},{272,4,1},{273,4,1},{274,4,1},{275,4,1},{276,4,1},{277,4,1},{278,4,1},{279,4,1},{280,4,1},{281,4,1},{282,4,1},{283,4,1},{284,4,1},{285,4,1},{286,4,1},{287,4,1},{288,4,1},{289,4,1},{290,4,1},{291,4,1},{292,4,1},{293,4,1},{294,4,1},{295,4,1},{296,4,1},{297,4,1},{298,4,1},{299,4,1},{300,4,1},{301,4,1},{302,4,1},{303,4,1},{304,4,1},{305,4,1},{306,4,1},{307,4,1},{308,4,1},{309,4,1},{310,4,1},{311,4,1},{312,4,1},{313,4,1},{314,4,1},{315,4,1},{316,4,1},{317,4,1},{318,4,1},{319,4,1},{320,4,1},{321,4,1},{322,4,1},{323,4,1},{324,4,1},{325,4,1},{326,4,1},{327,4,1},{328,4,1},{329,4,1},{330,4,1},{331,4,1},{332,4,1},{333,4,1},{334,4,1},{335,4,1},{336,4,1},{337,4,1},{338,4,1},{339,4,1},{340,4,1},{341,4,1},{342,4,1},{343,4,1},{344,4,1},{345,4,1},{346,4,1},{347,4,1},{348,4,1},{349,4,1},{350,4,1},{351,4,1},{352,4,1},{353,4,1},{354,4,1},{355,4,1},{356,4,1},{357,4,1},{358,4,1},{359,4,1},{360,4,1},{361,4,1},{362,4,1},{363,4,1},{364,4,1},{365,4,1},{366,4,1},{367,4,1},{368,4,1},{369,4,1},{370,4,1},{371,4,1},{372,4,1},{373,4,1},{374,4,1},{375,4,1},{376,4,1},{377,4,1},{378,4,1},{379,4,1},{380,4,1},{381,4,1},{382,4,1},{383,4,1},{384,4,1},{385,4,1},{386,4,1},{387,4,1},{388,4,1},{389,4,1},{390,4,1},{391,4,1},{392,4,1},{393,4,1},{394,4,1},{395,4,1},{396,4,1},{397,4,1},{398,4,1},{399,4,1},{400,4,1},{401,4,1},{402,4,1},{403,4,1},{404,4,1},{405,4,1},{406,4,1},{407,4,1},{408,4,1},{409,4,1},{410,4,1},{411,4,1},{412,4,1},{413,4,1},{414,4,1},{415,4,1},{416,4,1},{417,4,1},{418,4,1},{419,4,1},{420,4,1},{421,4,1},{422,4,1},{423,4,1},{424,4,1},{425,4,1},{426,4,1},{427,4,1},{428,4,1},{429,4,1},{430,4,1},{431,4,1},{432,4,1},{433,4,1},{434,4,1},{435,4,1},{436,4,1},{437,4,1},{438,4,1},{439,4,1},{440,4,1},{441,4,1},{442,4,1},{443,4,1},{444,4,1},{445,4,1},{446,4,1},{447,4,1},{448,4,1},{449,4,1},{450,4,1},{451,4,1},{452,4,1},{453,4,1},{454,4,1},{455,4,1},{456,4,1},{457,4,1},{458,4,1},{459,4,1},{460,4,1},{461,4,1},{462,4,1},{463,4,1},{464,4,1},{465,4,1},{466,4,1},{467,4,1},{468,4,1},{469,4,1},{470,4,1},{471,4,1},{472,4,1},{473,4,1},{474,4,1},{475,4,1},{476,4,1},{477,4,1},{478,4,1},{479,4,1},{480,4,1},{481,4,1},{482,4,1},{483,4,1},{484,4,1},{485,4,1},{486,4,1},{487,4,1},{488,4,1},{489,4,1},{490,4,1},{491,4,1},{492,4,1},{493,4,1},{494,4,1},{495,4,1},{496,4,1},{497,4,1},{498,4,1},{499,4,1},{500,4,1},{501,4,1},{502,4,1},{503,4,1},{504,4,1},{505,4,1},{506,4,1},{507,4,1},{508,4,1},{509,4,1},{510,4,1},{511,4,1},{512,4,1},{513,4,1},{514,4,1},{515,4,1},{516,4,1},{517,4,1},{518,4,1},{519,4,1},{520,4,1},{521,4,1},{522,4,1},{523,4,1},{524,4,1},{525,4,1},{526,4,1},{527,4,1},{528,4,1},{529,4,1},{530,4,1},{531,4,1},{532,4,1},{533,4,1},{534,4,1},{535,4,1},{536,4,1},{537,4,1},{538,4,1},{539,4,1},{540,4,1},{541,4,1},{542,4,1},{543,4,1},{544,4,1},{545,4,1},{546,4,1},{547,4,1},{548,4,1},{549,4,1},{550,4,1},{551,4,1},{552,4,1},{553,4,1},{554,4,1},{555,4,1},{556,4,1},{557,4,1},{558,4,1},{559,4,1},{560,4,1},{561,4,1},{562,4,1},{563,4,1},{564,4,1},{565,4,1},{566,4,1},{567,4,1},{568,4,1},{569,4,1},{570,4,1},{571,4,1},{572,4,1},{573,4,1},{574,4,1},{575,4,1},{576,4,1},{577,4,1},{578,4,1},{579,4,1},{580,4,1},{581,4,1},{582,4,1},{583,4,1},{584,4,1},{585,4,1},{586,4,1},{587,4,1},{588,4,1},{592,4,1},{592,4,1},{592,4,1},{592,4,1},{593,4,1},{593,4,1},{594,4,1},{594,4,1},{595,4,1},{596,4,1},{597,4,1},{597,4,1},{598,4,1},{599,4,1},{599,4,1},{600,4,1},{601,4,1},{601,4,1},{602,4,1},{603,4,1},{603,4,1},{604,4,1},{605,4,1},{609,4,1},{609,4,1},{609,4,1},{609,4,1},{610,4,1},{610,4,1},{611,4,1},{612,4,1},{613,4,1},{613,4,1},{614,4,1},{614,4,1},{615,4,1},{616,4,1},{617,4,1},{617,4,1},{618,4,1},{619,4,1},{620,4,1},{621,4,1},{621,4,1},{622,4,1},{626,4,1},{626,4,1},{626,4,1},{626,4,1},{627,4,1},{628,4,1},{628,4,1},{629,4,1},{630,4,1},{631,4,1},{632,4,1},{632,4,1},{633,4,1},{634,4,1},{634,4,1},{635,4,1},{636,4,1},{637,4,1},{638,4,1},{638,4,1},{639,4,1},{640,4,1},{644,4,1},{644,4,1},{644,4,1},{644,4,1},{645,4,1},{646,4,1},{646,4,1},{647,4,1},{648,4,1},{648,4,1},{650,4,1},{650,4,1},{651,4,1},{652,4,1},{653,4,1},{654,4,1},{654,4,1},{655,4,1},{656,4,1},{657,4,1},{661,4,1},{661,4,1},{661,4,1},{661,4,1},{662,4,1},{663,4,1},{664,4,1},{664,4,1},{665,4,1},{666,4,1},{667,4,1},{668,4,1},{669,4,1},{669,4,1},{670,4,1},{671,4,1},{672,4,1},{673,4,1},{674,4,1},{675,4,1},{679,4,1},{679,4,1},{679,4,1},{680,4,1},{680,4,1},{681,4,1},{682,4,1},{683,4,1},{684,4,1},{684,4,1},{685,4,1},{686,4,1},{687,4,1},{688,4,1},{689,4,1},{690,4,1},{691,4,1},{692,4,1},{696,4,1},{696,4,1},{696,4,1},{697,4,1},{698,4,1},{699,4,1},{700,4,1},{701,4,1},{702,4,1},{702,4,1},{703,4,1},{704,4,1},{705,4,1},{706,4,1},{707,4,1},{708,4,1},{709,4,1},{710,4,1},{714,4,1},{714,4,1},{715,4,1},{715,4,1},{716,4,1},{717,4,1},{718,4,1},{719,4,1},{720,4,1},{721,4,1},{722,4,1},{723,4,1},{724,4,1},{725,4,1},{726,4,1},{728,4,1},{728,4,1},{732,4,1},{732,4,1},{732,4,1},{734,4,1},{735,4,1},{736,4,1},{737,4,1},{738,4,1},{739,4,1},{740,4,1},{741,4,1},{742,4,1},{743,4,1},{745,4,1},{745,4,1},{750,4,1},{750,4,1},{750,4,1},{751,4,1},{752,4,1},{753,4,1},{754,4,1},{756,4,1},{757,4,1},{758,4,1},{759,4,1},{760,4,1},{761,4,1},{763,4,1},{763,4,1},{768,4,1},{768,4,1},{768,4,1},{769,4,1},{770,4,1},{771,4,1},{773,4,1},{774,4,1},{774,4,1},{776,4,1},{777,4,1},{778,4,1},{779,4,1},{781,4,1},{782,4,1},{786,4,1},{786,4,1},{787,4,1},{788,4,1},{789,4,1},{790,4,1},{792,4,1},{793,4,1},{794,4,1},{795,4,1},{797,4,1},{798,4,1},{799,4,1},{804,4,1},{804,4,1},{804,4,1},{805,4,1},{807,4,1},{808,4,1},{810,4,1},{811,4,1},{813,4,1},{814,4,1},{816,4,1},{817,4,1},{818,4,1},{822,4,1},{822,4,1},{823,4,1},{825,4,1},{826,4,1},{827,4,1},{829,4,1},{830,4,1},{832,4,1},{833,4,1},{835,4,1},{836,4,1},{840,4,1},{840,4,1},{841,4,1},{843,4,1},{844,4,1},{846,4,1},{847,4,1},{849,4,1},{850,4,1},{852,4,1},{854,4,1},{858,4,1},{858,4,1},{859,4,1},{861,4,1},{863,4,1},{864,4,1},{866,4,1},{868,4,1},{870,4,1},{871,4,1},{876,4,1},{876,4,1},{877,4,1},{880,4,1}};

    params->cost_model = 1;
    params->theo_pnjbkz_d4f = 2;
    params->theo_pump_d4f = 2;
    params->list_decoding = "matzov22";

    test_nist_from_gsa(params, n, m, q, D_e, D_s,strategy);
}