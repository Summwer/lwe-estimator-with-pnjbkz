// #include <boost/math/distributions/chi_squared.hpp>
#include <iostream>
#include "framework/est.h"

using namespace std;
// using namespace boost;



void sim_strategy(Params* params, vector<double> l, vector<tuple<int,int,int>> strategy, double sigma){
    int dim = int(l.size());
    BKZJSim* sim = new BKZJSim(params,dim);
    COST* cost = new COST(params);
    double Gcum = -1000., Bcum = -1000., cum_pr = 0., rem_pr = 1., GBKZ = -1000.;
    pair<double,double> G;
    for(int i = 0; i<int(strategy.size()); i++){
        int beta = get<0>(strategy[i]), jump = get<1>(strategy[i]), tours = get<2>(strategy[i]);
        for(int t = 0; t< tours; t++){
            int beta_ = get_beta_(params, beta, jump, dim);
            sim -> simulate(l,l,beta,jump,1);
            double slope = get_current_slope(l,0,dim);
            boost::math::chi_squared chisquare(beta_);

            double pr = boost::math::cdf(chisquare,pow(2,2.*l[dim-beta_]));
   
            G = cost->bkz_cost(dim,beta,jump,params->cost_model);


            printf("%d, %d, %.4f, %.4f, %.4f\n", beta,jump,slope,slope/2., G.first);
        } 
    }
}


//Simulate the stratey from original lwe instance 
void test_lwechal_from_original_instance(Params* params, int n, double alpha, vector<tuple<int,int,int>> strategy){
    LWEchal* lwechal = gen_lwechal_instance(n, alpha);
    int dim = lwechal->dim;
    FP_NR<FT> dvol = lwechal->dvol;
    vector<double> l = lwechal->log_rr, l_;
    double  sigma = lwechal->alpha * lwechal->q;
    // printf("No sigma normalization,");
    // sim_strategy(params, l, strategy,sigma);

    printf("After a sigma normalization,");
    for(int i = 0; i < dim; i++){
        l[i] -=  log2(sigma);
    }
    double slope = get_current_slope(l,0,dim);
    printf("slope = %f\n", slope);
    sim_strategy(params, l, strategy,1.);
}


//Simulate the stratey from gsa-gs-lengths and original lwe instance 
void test_lwechal_from_gsa(Params* params, int dim, double dvol, vector<tuple<int,int,int>> strategy){
    // printf("Generate gs-lengths by GSA assumption...\n");
    vector<double>  l = gen_simulated_gso(dim, dvol);
    double slope = get_current_slope(l,0,dim);
    // cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;

    sim_strategy(params, l, strategy, 1.);
}


void test_nist_from_gsa(Params* params,int n, int m, int q,  map<int,double> D_e, map<int,double> D_s, vector<tuple<int,int,int>> strategy){
    printf("Generate gs-lengths by GSA assumption...\n");
    LWEchal* lwechal = gen_LWE_instance_with_input_distribution( n, q, m, D_e, D_s, params->verbose);
    vector<double>  l = gen_simulated_gso(lwechal->dim, lwechal->dvol);
    double slope = get_current_slope(l,0,lwechal->dim);
    cout<<"Slope of gs-lengths generated by GSA assumption: "<<slope<<endl;

    sim_strategy(params, l, strategy, 1.);
}


int main(){

    map<int,double> D_e, D_s;
    int n, m , q, eta;
    double alpha;
    Params* params = new Params;
    params->cost_model = 2;
    params->practical_pnjbkz_d4f = 3;
    params->practical_pump_d4f = 3;
    params->worst_case = true;
    params->verbose = true;
    vector<tuple<int,int,int>> strategy;
 


    params->worst_case = false;
    params->cost_model = 2;
    params->theo_pnjbkz_d4f = 2;
    params->theo_pump_d4f = 2;
    // params->list_decoding = "matzov22";
    

    int dim = 252;
    double dvol = 678.72747085249;
    printf("beta, jump, 2*slope, slope, T\n");
    for(int beta = 80; beta < 160; beta += 3){
        //lwe (50,0.040)
        test_lwechal_from_gsa(params, dim, dvol, {{beta,1,1}});
    }
    for(int beta = 80; beta < 160; beta += 3){
        //lwe (50,0.040)
        test_lwechal_from_gsa(params, dim, dvol, {{beta,4,1}});
    }
    for(int beta = 80; beta < 160; beta += 3){
        //lwe (50,0.040)
        test_lwechal_from_gsa(params, dim, dvol, {{beta,9,1}});
    }
}